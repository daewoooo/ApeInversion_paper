CN.tab <- mcols(linspec.dups.expand.gr)[-c(1,ncol(mcols(linspec.dups.expand.gr)))]
CN.tab.df <- as.data.frame(CN.tab)
mean.CN <- rowMeans(CN.tab.df)
linspec.dups.lifted.gr$mean.CN <- mean.CN
mean.CN
length( mean.CN)
linspec.dups.lifted.gr
linspec.dups.gr
linspec.dups.gr <- sort(linspec.dups.gr)
## Remove unnecessary characters
linspec.dups.gr$lineage <- gsub(linspec.dups.gr$lineage, pattern = 'ils_clades_', replacement = '')
names <- linspec.dups.gr$lineage
## Decode orangutan
names <- gsub(names, pattern = 'Ppy|Pab|ORANGUTAN', replacement = 'orangutan')
## Decode gorilla
names <- gsub(names, pattern = 'Ggod|Ggog|Gbeg|EASTERN_GORILLA|WESTERN_GORILLA', replacement = 'gorilla')
## Decode bonobo
names <- gsub(names, pattern = 'Ppa|BONOBO', replacement = 'bonobo')
## Decode chimpanzee
names <- gsub(names, pattern = 'Ptrs|Ptrt|Ptre|Ptrv|CHIMP', replacement = 'chimpanzee')
## Expand ranges
names.list <- strsplit(names, "-")
names.list <- lapply(names.list, unique) ## Keep unique names
reps <- lengths(names.list)
linspec.dups.expand.gr <- rep(linspec.dups.gr, reps)
linspec.dups.expand.gr$ID <- unlist(names.list)
linspec.dups.expand.gr
## Export table
## Liftover coordinates (GRCh36 -> GRCh38) from this table before proceeding further
## Remove the range that failed to lift from GRCh36 to GRCh38 (chr2:242366422-242417043)
linspec.dups.expand.gr <- linspec.dups.expand.gr[!start(linspec.dups.expand.gr) == 242366422]
export.df <- as.data.frame(linspec.dups.expand.gr[,'ID'])
destination <- file.path(outputdirectory, "sudmantLinSpecDups_GRCh36.bed")
write.table(export.df, file = destination, row.names = FALSE, quote = FALSE, col.names = FALSE, sep = '\t')
## Load ape's composite files
chimp.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_chimpanzee_final.RData"))
chimp.data$ID <- 'chimpanzee'
bonobo.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_bonobo_final.RData"))
bonobo.data$ID <- 'bonobo'
gorilla.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_gorilla_final.RData"))
gorilla.data$ID <- 'gorilla'
orangutan.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_orangutan_final.RData"))
orangutan.data$ID <- 'orangutan'
nrow(export.df)
linspec.dups.expand.gr
linspec.dups.gr
## Load ape's composite files
chimp.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_chimpanzee_final.RData"))
chimp.data$ID <- 'chimpanzee'
bonobo.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_bonobo_final.RData"))
bonobo.data$ID <- 'bonobo'
gorilla.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_gorilla_final.RData"))
gorilla.data$ID <- 'gorilla'
orangutan.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_orangutan_final.RData"))
orangutan.data$ID <- 'orangutan'
## Load liftover data
linspec.dups.lifted <- read.table(file.path(outputdirectory, "sudmantLinSpecDups_GRCh36toGRCh38.bed"))
linspec.dups.lifted.gr <- GRanges(seqnames=linspec.dups.lifted$V1, ranges=IRanges(start=linspec.dups.lifted$V2, end=linspec.dups.lifted$V3), ID=linspec.dups.lifted$V6)
linspec.dups.lifted.gr
if (filterByCN) {
## Add mean CN info from the original(unlifted) data object
CN.tab <- mcols(linspec.dups.expand.gr)[-c(1,ncol(mcols(linspec.dups.expand.gr)))]
CN.tab.df <- as.data.frame(CN.tab)
mean.CN <- rowMeans(CN.tab.df)
linspec.dups.lifted.gr$mean.CN <- mean.CN
## Keep only region with mean CN < 5
linspec.dups.lifted.gr <- linspec.dups.lifted.gr[linspec.dups.lifted.gr$mean.CN < 5]
}
## Regenotype these regions using Strand-seq
## Genotype chimpanzee data
genotype.chimp <- linspec.dups.lifted.gr[linspec.dups.lifted.gr$ID == 'c']
genotype.chimp <- genotypeRegions(regions = genotype.chimp, directional.reads = chimp.data, blacklist = seg.dup.gr, min.reads = 5, alpha = 0.05, index = 'chimpanzee')
## Genotype bonobo data
genotype.bonobo <- linspec.dups.lifted.gr[linspec.dups.lifted.gr$ID == 'b']
genotype.bonobo <- genotypeRegions(regions = genotype.bonobo, directional.reads = bonobo.data, blacklist = seg.dup.gr, min.reads = 5, alpha = 0.05, index = 'bonobo')
## Genotype gorilla data
genotype.gorilla <- linspec.dups.lifted.gr[linspec.dups.lifted.gr$ID == 'g']
genotype.gorilla  <- genotypeRegions(regions = genotype.gorilla , directional.reads = gorilla.data, blacklist = seg.dup.gr, min.reads = 5, alpha = 0.05, index = 'gorilla')
## Genotype orangutan data
genotype.orang <- linspec.dups.lifted.gr[linspec.dups.lifted.gr$ID == 'o']
genotype.orang <- genotypeRegions(regions = genotype.orang, directional.reads = orangutan.data, blacklist = seg.dup.gr, min.reads = 5, alpha = 0.05, index = 'orangutan')
## Compile all results into a table
genotype.chimp.gen <- table(genotype.chimp$genoT_chimpanzee)
chimp.df <- data.frame(ID='chimpanzee', inverted=genotype.chimp.gen['HET'] + genotype.chimp.gen['HOM'],
direct=genotype.chimp.gen['REF'])
genotype.bonobo.gen <- table(genotype.bonobo$genoT_bonobo)
bonobo.df <- data.frame(ID='bonobo', inverted=genotype.bonobo.gen['HET'] + genotype.bonobo.gen['HOM'],
direct=genotype.bonobo.gen['REF'])
genotype.gorilla.gen <- table(genotype.gorilla$genoT_gorilla)
gorilla.df <- data.frame(ID='gorilla', inverted=genotype.gorilla.gen['HET'] + genotype.gorilla.gen['HOM'],
direct=genotype.gorilla.gen['REF'])
genotype.orangutan.gen <- table(genotype.orang$genoT_orangutan)
orangutan.df <- data.frame(ID='orangutan', inverted=genotype.orangutan.gen['HET'] + genotype.orangutan.gen['HOM'],
direct=genotype.orangutan.gen['REF'])
final.tab <- rbind(chimp.df, bonobo.df, gorilla.df, orangutan.df)
## Calculate proportion of inverted versus direct duplications
sums <- rowSums(final.tab[,c('inverted','direct')])
final.tab.long <- reshape2::melt(final.tab, id.vars = 'ID', measure.vars = c('direct', 'inverted'), variable.name = 'Dir', factorsAsStrings = TRUE)
final.tab.long$perc <- (final.tab.long$value / rep(sums, 2)) * 100
## Calculate significance of a difference between count of direct vs inverted invDups
plt.df <- final.tab.long
plt.df$Dir <- factor(plt.df$Dir, levels = c('direct', 'inverted'))
signif.results.all <- list()
for (i in unique(plt.df$ID)) {
sub.tab <- plt.df[plt.df$ID == i,]
data.matrix <- matrix(c(sub.tab$value[sub.tab$Dir == 'inverted'],
sum(sub.tab$value)/2,
sub.tab$value[sub.tab$Dir == 'direct'],
sum(sub.tab$value)/2),
nrow = 2
)
## Calculate Chi-square
chisq.pval <- chisq.test(data.matrix)$p.value
suppressWarnings( fish.oddsr <- fisher.test(data.matrix)$estimate )
signif.results <- data.frame(ID=i, chisq.pval=chisq.pval, fish.oddsr=unname(fish.oddsr))
signif.results.all[[length(signif.results.all) + 1]] <- signif.results
}
signif.results.all <- do.call(rbind, signif.results.all)
## Do multiple testing correction (Bonferroni)
signif.results.all$chisq.pval.BonfCorr <- p.adjust(p = signif.results.all$chisq.pval, method = 'bonferroni', n = length(signif.results.all$chisq.pval))
signif.results.all$pVal <- format(signif.results.all$chisq.pval.BonfCorr, scientific = TRUE, digits = 2)
plt1 <- ggplot(plt.df, aes(x=ID, y=value, group=ID)) +
geom_col(aes(fill=Dir)) +
geom_text(data=signif.results.all, aes(x=ID, y=Inf, label=pVal), inherit.aes = FALSE, vjust=1) +
geom_text(aes(group=ID, label=value), position = position_stack(vjust = 0.5)) +
xlab("") +
ylab("Counts") +
scale_fill_manual(values = c('darkslategray4', 'indianred4'), name="Direction") +
scale_x_discrete(labels = c('B', 'C', 'G', 'O'))
plt2 <- ggplot(plt.df) +
geom_bar(aes(x=ID, y=perc, fill=Dir), stat='identity') +
xlab("") +
ylab("Percentage (%)") +
scale_fill_manual(values = c('darkslategray4', 'indianred4')) +
scale_x_discrete(labels = c('B', 'C', 'G', 'O'))
plt1
plt.df
plt2 <- ggplot(plt.df) +
geom_bar(aes(x=ID, y=perc, fill=Dir), stat='identity') +
xlab("") +
ylab("Percentage (%)") +
scale_fill_manual(values = c('darkslategray4', 'indianred4')) +
scale_x_discrete(labels = c('B', 'C', 'G', 'O'))
ggplot(plt.df) +
geom_bar(aes(x=ID, y=perc, fill=Dir), stat='identity')
ggplot(plt.df) +
geom_col(aes(x=ID, y=perc, fill=Dir), stat='identity')
plt2 <- ggplot(plt.df) +
geom_col(aes(x=ID, y=perc, fill=Dir), stat='identity') +
xlab("") +
ylab("Percentage (%)") +
scale_fill_manual(values = c('darkslategray4', 'indianred4')) +
scale_x_discrete(labels = c('B', 'C', 'G', 'O'))
plt2
plt2 <- ggplot(plt.df) +
geom_col(aes(x=ID, y=perc, fill=Dir)) +
xlab("") +
ylab("Percentage (%)") +
scale_fill_manual(values = c('darkslategray4', 'indianred4')) +
scale_x_discrete(labels = c('B', 'C', 'G', 'O'))
## Save final plot
final.plt <- plot_grid(plt1, plt2, nrow = 1)
final.plt
plt.df
plt.df[plt.df$Dir == 'direct']
plt.df[plt.df$Dir == 'direct',]
plt.df[plt.df$Dir == 'direct',]$perc
mean(plt.df[plt.df$Dir == 'direct',]$perc)
mean(plt.df[plt.df$Dir == 'inverted',]$perc)
## Save final plot
final.plt <- plot_grid(plt1, plt2, nrow = 1)
#destination <- file.path(outputdirectory, "invervedVSdirect_duplications_sudmant2013_regenotyped.pdf")
destination <- file.path(outputdirectory, "invervedVSdirect_duplications_sudmant2013_regenotyped_filtCN.pdf")
ggsave(final.plt, filename = destination, device = 'pdf', width = 8, height = 5)
#destination <- file.path(outputdirectory, "invervedVSdirect_duplications_sudmant2013_regenotyped.pdf")
destination <- file.path(outputdirectory, "invervedVSdirect_duplications_sudmant2013_regenotyped_filtCN.pdf")
ggsave(final.plt, filename = destination, width = 8, height = 5)
## Load ape's composite files
chimp.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_chimpanzee_final.RData"))
chimp.data$ID <- 'chimpanzee'
bonobo.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_bonobo_final.RData"))
bonobo.data$ID <- 'bonobo'
gorilla.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_gorilla_final.RData"))
gorilla.data$ID <- 'gorilla'
orangutan.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_orangutan_final.RData"))
orangutan.data$ID <- 'orangutan'
## Load liftover data
linspec.dups.lifted <- read.table(file.path(outputdirectory, "sudmantLinSpecDups_GRCh36toGRCh38.bed"))
linspec.dups.lifted.gr <- GRanges(seqnames=linspec.dups.lifted$V1, ranges=IRanges(start=linspec.dups.lifted$V2, end=linspec.dups.lifted$V3), ID=linspec.dups.lifted$V6)
## Regenotype these regions using Strand-seq
## Genotype chimpanzee data
genotype.chimp <- linspec.dups.lifted.gr[linspec.dups.lifted.gr$ID == 'c']
genotype.chimp <- genotypeRegions(regions = genotype.chimp, directional.reads = chimp.data, blacklist = seg.dup.gr, min.reads = 5, alpha = 0.05, index = 'chimpanzee')
## Genotype bonobo data
genotype.bonobo <- linspec.dups.lifted.gr[linspec.dups.lifted.gr$ID == 'b']
genotype.bonobo <- genotypeRegions(regions = genotype.bonobo, directional.reads = bonobo.data, blacklist = seg.dup.gr, min.reads = 5, alpha = 0.05, index = 'bonobo')
## Genotype gorilla data
genotype.gorilla <- linspec.dups.lifted.gr[linspec.dups.lifted.gr$ID == 'g']
genotype.gorilla  <- genotypeRegions(regions = genotype.gorilla , directional.reads = gorilla.data, blacklist = seg.dup.gr, min.reads = 5, alpha = 0.05, index = 'gorilla')
## Genotype orangutan data
genotype.orang <- linspec.dups.lifted.gr[linspec.dups.lifted.gr$ID == 'o']
genotype.orang <- genotypeRegions(regions = genotype.orang, directional.reads = orangutan.data, blacklist = seg.dup.gr, min.reads = 5, alpha = 0.05, index = 'orangutan')
## Compile all results into a table
genotype.chimp.gen <- table(genotype.chimp$genoT_chimpanzee)
chimp.df <- data.frame(ID='chimpanzee', inverted=genotype.chimp.gen['HET'] + genotype.chimp.gen['HOM'],
direct=genotype.chimp.gen['REF'])
genotype.bonobo.gen <- table(genotype.bonobo$genoT_bonobo)
bonobo.df <- data.frame(ID='bonobo', inverted=genotype.bonobo.gen['HET'] + genotype.bonobo.gen['HOM'],
direct=genotype.bonobo.gen['REF'])
genotype.gorilla.gen <- table(genotype.gorilla$genoT_gorilla)
gorilla.df <- data.frame(ID='gorilla', inverted=genotype.gorilla.gen['HET'] + genotype.gorilla.gen['HOM'],
direct=genotype.gorilla.gen['REF'])
genotype.orangutan.gen <- table(genotype.orang$genoT_orangutan)
orangutan.df <- data.frame(ID='orangutan', inverted=genotype.orangutan.gen['HET'] + genotype.orangutan.gen['HOM'],
direct=genotype.orangutan.gen['REF'])
final.tab <- rbind(chimp.df, bonobo.df, gorilla.df, orangutan.df)
## Calculate proportion of inverted versus direct duplications
sums <- rowSums(final.tab[,c('inverted','direct')])
final.tab.long <- reshape2::melt(final.tab, id.vars = 'ID', measure.vars = c('direct', 'inverted'), variable.name = 'Dir', factorsAsStrings = TRUE)
final.tab.long$perc <- (final.tab.long$value / rep(sums, 2)) * 100
## Calculate significance of a difference between count of direct vs inverted invDups
plt.df <- final.tab.long
plt.df$Dir <- factor(plt.df$Dir, levels = c('direct', 'inverted'))
signif.results.all <- list()
for (i in unique(plt.df$ID)) {
sub.tab <- plt.df[plt.df$ID == i,]
data.matrix <- matrix(c(sub.tab$value[sub.tab$Dir == 'inverted'],
sum(sub.tab$value)/2,
sub.tab$value[sub.tab$Dir == 'direct'],
sum(sub.tab$value)/2),
nrow = 2
)
## Calculate Chi-square
chisq.pval <- chisq.test(data.matrix)$p.value
suppressWarnings( fish.oddsr <- fisher.test(data.matrix)$estimate )
signif.results <- data.frame(ID=i, chisq.pval=chisq.pval, fish.oddsr=unname(fish.oddsr))
signif.results.all[[length(signif.results.all) + 1]] <- signif.results
}
signif.results.all <- do.call(rbind, signif.results.all)
## Do multiple testing correction (Bonferroni)
signif.results.all$chisq.pval.BonfCorr <- p.adjust(p = signif.results.all$chisq.pval, method = 'bonferroni', n = length(signif.results.all$chisq.pval))
signif.results.all$pVal <- format(signif.results.all$chisq.pval.BonfCorr, scientific = TRUE, digits = 2)
plt1 <- ggplot(plt.df, aes(x=ID, y=value, group=ID)) +
geom_col(aes(fill=Dir)) +
geom_text(data=signif.results.all, aes(x=ID, y=Inf, label=pVal), inherit.aes = FALSE, vjust=1) +
geom_text(aes(group=ID, label=value), position = position_stack(vjust = 0.5)) +
xlab("") +
ylab("Counts") +
scale_fill_manual(values = c('darkslategray4', 'indianred4'), name="Direction") +
scale_x_discrete(labels = c('B', 'C', 'G', 'O'))
plt2 <- ggplot(plt.df) +
geom_col(aes(x=ID, y=perc, fill=Dir)) +
xlab("") +
ylab("Percentage (%)") +
scale_fill_manual(values = c('darkslategray4', 'indianred4')) +
scale_x_discrete(labels = c('B', 'C', 'G', 'O'))
## Save final plot
final.plt <- plot_grid(plt1, plt2, nrow = 1)
final.plt
destination <- file.path(outputdirectory, "invervedVSdirect_duplications_sudmant2013_regenotyped.pdf")
ggsave(final.plt, filename = destination, width = 8, height = 5)
## Set output directory
outputdirectory <- "/home/porubsky/WORK/Great_apes/InvertedDups_analysis/"
## Load segDup Track
seg.dup <- read.table("/home/porubsky/WORK/Great_apes/Annotations/segDupTrackUCSC_hg38.bed")
seg.dup.gr <- GRanges(seqnames=seg.dup$V1, ranges=IRanges(start=seg.dup$V2, end=seg.dup$V3), fracMatch=seg.dup$V4)
## Load centromere Track
cent <- read.table("/home/porubsky/WORK/Great_apes/Annotations/centromeres_GRCh38.bed.gz")
cent.gr <- GRanges(seqnames=cent$V2, ranges=IRanges(start=cent$V3, end=cent$V4))
## Create blacklist
## +/- 500kb from the centromeres
blacklist1 <- GRanges(seqnames=cent$V2, ranges=IRanges(start=cent$V3-500000, end=cent$V4+500000))
## 5Mb from each chromosome end
chrom.len <- seqlengths(BSgenome.Hsapiens.UCSC.hg38)[paste0('chr', c(1:22, 'X'))]
blacklist2 <- GRanges(seqnames=names(chrom.len), ranges=IRanges(start = 1, end = 5000000))
blacklist3 <- GRanges(seqnames=names(chrom.len), ranges=IRanges(start = chrom.len - 5000000, end = chrom.len))
## Merge all blacklists together
blacklist <- reduce(c(blacklist1, blacklist2, blacklist3))
## Read in all called inversions
all.inversion.calls.filt <- get(load("/home/porubsky/WORK/Great_apes/Final_INV_calls/all.inversion.calls.filt.RData"))
## Filter only inverted duplications invDups
all.invDups.gr <- all.inversion.calls.filt[all.inversion.calls.filt$SVclass == 'invDup']
## Load manually selected duplicated regions with direct orientation
directDups <- read.table(file.path(outputdirectory, "directDups_list.txt"), stringsAsFactors = FALSE, header = FALSE)
directDups.gr <- GRanges(seqnames=directDups$V1, ranges=IRanges(start=directDups$V2, end=directDups$V3), ID=directDups$V4)
## Keep only events >=10kb
directDups.gr <- directDups.gr[width(directDups.gr) >= 10000]
## Plot invDup counts and size distribution for inverted dups ##
################################################################
all.invDups.df <- as.data.frame(all.invDups.gr)
colors = c('#3182bd','#31a354','#8856a7','#e6550d')
plt1 <- all.invDups.df %>% group_by(ID) %>% summarise(count=n()) %>%
ggplot() + geom_col(aes(x=ID, y=count, fill=ID)) +
scale_fill_manual(values = colors, guide='none') +
xlab("") +
geom_text(aes(x=ID, y=count, label=count), vjust=0)+
scale_x_discrete(labels = c('B', 'C', 'G', 'O'))
plt2 <- all.invDups.df %>% group_by(ID) %>% summarise(invBases=sum(width)) %>%
ggplot() + geom_col(aes(x=ID, y=invBases, fill=ID)) +
scale_fill_manual(values = colors, guide='none') +
xlab("") +
ylab("Total inverted bases (bp)") +
scale_y_continuous(labels = comma) +
scale_x_discrete(labels = c('B', 'C', 'G', 'O'))
final.plt <- plot_grid(plt1, plt2, nrow = 1, rel_widths = c(0.8, 1))
final.plt
## Plot proportion of direct vs inverted duplications ##
########################################################
## Remove calls from the blacklisted regions
all.invDups.gr <- subsetByOverlaps(all.invDups.gr, blacklist, invert = TRUE)
directDups.gr <- subsetByOverlaps(directDups.gr, blacklist, invert = TRUE)
invDups.counts <- as.data.frame(table(all.invDups.gr$ID))
dirDups.counts <- as.data.frame(table(directDups.gr$ID))
## Calculate percentage of both direct and inverted dups
perc.direct <- (dirDups.counts$Freq / (invDups.counts$Freq + dirDups.counts$Freq))
perc.inverted <- (invDups.counts$Freq / (invDups.counts$Freq + dirDups.counts$Freq))
## Prepare data.frame for plotting
dirDups.counts$perc <- perc.direct
invDups.counts$perc <- perc.inverted
dirDups.counts$Dir <- 'direct'
invDups.counts$Dir <- 'inverted'
plt.df <- rbind(dirDups.counts, invDups.counts)
## Calculate significance of a difference between count of direct vs inverted invDups
signif.results.all <- list()
for (i in unique(plt.df$Var1)) {
sub.tab <- plt.df[plt.df$Var1 == i,]
data.matrix <- matrix(c(sub.tab$Freq[sub.tab$Dir == 'inverted'],
sum(sub.tab$Freq)/2,
sub.tab$Freq[sub.tab$Dir == 'direct'],
sum(sub.tab$Freq)/2),
nrow = 2
)
## Calculate Chi-square
chisq.pval <- chisq.test(data.matrix)$p.value
suppressWarnings( fish.oddsr <- fisher.test(data.matrix)$estimate )
signif.results <- data.frame(ID=i, chisq.pval=chisq.pval, fish.oddsr=unname(fish.oddsr))
signif.results.all[[length(signif.results.all) + 1]] <- signif.results
}
signif.results.all <- do.call(rbind, signif.results.all)
## Do multiple testing correction (Bonferroni)
signif.results.all$chisq.pval.BonfCorr <- p.adjust(p = signif.results.all$chisq.pval, method = 'bonferroni', n = length(signif.results.all$chisq.pval))
signif.results.all$pVal <- format(signif.results.all$chisq.pval.BonfCorr, scientific = TRUE, digits = 2)
plt3 <- ggplot(plt.df, aes(x=Var1, y=Freq, group=Var1)) +
geom_col(aes(fill=Dir)) +
geom_text(data=signif.results.all, aes(x=ID, y=Inf, label=pVal), inherit.aes = FALSE, vjust=1) +
geom_text(aes(group=Var1, label=Freq), position = position_stack(vjust = 0.5)) +
xlab("") +
ylab("Counts") +
scale_fill_manual(values = c('darkslategray4', 'indianred4'), name="Direction") +
scale_x_discrete(labels = c('B', 'C', 'G', 'O'))
plt4 <- ggplot(plt.df) +
geom_bar(aes(x=Var1, y=perc, fill=Dir), stat='identity') +
xlab("") +
ylab("Percentage (%)") +
scale_fill_manual(values = c('darkslategray4', 'indianred4')) +
scale_x_discrete(labels = c('B', 'C', 'G', 'O'))
plt4 <- ggplot(plt.df) +
geom_col(aes(x=Var1, y=perc, fill=Dir)) +
xlab("") +
ylab("Percentage (%)") +
scale_fill_manual(values = c('darkslategray4', 'indianred4')) +
scale_x_discrete(labels = c('B', 'C', 'G', 'O'))
final.plt <- plot_grid(plt3, plt4, nrow = 1)
final.plt
destination <- file.path(outputdirectory, "invervedVSdirect_duplications.pdf")
ggsave(final.plt, filename = destination, device = 'pdf', width = 10, height = 5)
destination <- file.path(outputdirectory, "invervedVSdirect_duplications.pdf")
ggsave(final.plt, filename = destination, width = 10, height = 5)
## Load ape's composite files
chimp.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_chimpanzee_final.RData"))
chimp.data$ID <- 'chimpanzee'
bonobo.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_bonobo_final.RData"))
bonobo.data$ID <- 'bonobo'
gorilla.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_gorilla_final.RData"))
gorilla.data$ID <- 'gorilla'
orangutan.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_orangutan_final.RData"))
orangutan.data$ID <- 'orangutan'
## Load liftover data
linspec.dups.lifted <- read.table(file.path(outputdirectory, "sudmantLinSpecDups_GRCh36toGRCh38.bed"))
linspec.dups.lifted.gr <- GRanges(seqnames=linspec.dups.lifted$V1, ranges=IRanges(start=linspec.dups.lifted$V2, end=linspec.dups.lifted$V3), ID=linspec.dups.lifted$V6)
if (filterByCN) {
## Add mean CN info from the original(unlifted) data object
CN.tab <- mcols(linspec.dups.expand.gr)[-c(1,ncol(mcols(linspec.dups.expand.gr)))]
CN.tab.df <- as.data.frame(CN.tab)
mean.CN <- rowMeans(CN.tab.df)
linspec.dups.lifted.gr$mean.CN <- mean.CN
## Keep only region with mean CN < 5
linspec.dups.lifted.gr <- linspec.dups.lifted.gr[linspec.dups.lifted.gr$mean.CN < 5]
}
## Regenotype these regions using Strand-seq
## Genotype chimpanzee data
genotype.chimp <- linspec.dups.lifted.gr[linspec.dups.lifted.gr$ID == 'c']
## Load ape's composite files
chimp.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_chimpanzee_final.RData"))
chimp.data$ID <- 'chimpanzee'
bonobo.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_bonobo_final.RData"))
bonobo.data$ID <- 'bonobo'
gorilla.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_gorilla_final.RData"))
gorilla.data$ID <- 'gorilla'
orangutan.data <- get(load("/home/porubsky/WORK/Great_apes/Composite_files/syncReads_orangutan_final.RData"))
orangutan.data$ID <- 'orangutan'
## Load liftover data
linspec.dups.lifted <- read.table(file.path(outputdirectory, "sudmantLinSpecDups_GRCh36toGRCh38.bed"))
linspec.dups.lifted.gr <- GRanges(seqnames=linspec.dups.lifted$V1, ranges=IRanges(start=linspec.dups.lifted$V2, end=linspec.dups.lifted$V3), ID=linspec.dups.lifted$V6)
## Regenotype these regions using Strand-seq
## Genotype chimpanzee data
genotype.chimp <- linspec.dups.lifted.gr[linspec.dups.lifted.gr$ID == 'c']
genotype.chimp <- genotypeRegions(regions = genotype.chimp, directional.reads = chimp.data, blacklist = seg.dup.gr, min.reads = 5, alpha = 0.05, index = 'chimpanzee')
## Genotype bonobo data
genotype.bonobo <- linspec.dups.lifted.gr[linspec.dups.lifted.gr$ID == 'b']
genotype.bonobo <- genotypeRegions(regions = genotype.bonobo, directional.reads = bonobo.data, blacklist = seg.dup.gr, min.reads = 5, alpha = 0.05, index = 'bonobo')
## Genotype gorilla data
genotype.gorilla <- linspec.dups.lifted.gr[linspec.dups.lifted.gr$ID == 'g']
genotype.gorilla  <- genotypeRegions(regions = genotype.gorilla , directional.reads = gorilla.data, blacklist = seg.dup.gr, min.reads = 5, alpha = 0.05, index = 'gorilla')
## Genotype orangutan data
genotype.orang <- linspec.dups.lifted.gr[linspec.dups.lifted.gr$ID == 'o']
genotype.orang <- genotypeRegions(regions = genotype.orang, directional.reads = orangutan.data, blacklist = seg.dup.gr, min.reads = 5, alpha = 0.05, index = 'orangutan')
## Compile all results into a table
genotype.chimp.gen <- table(genotype.chimp$genoT_chimpanzee)
chimp.df <- data.frame(ID='chimpanzee', inverted=genotype.chimp.gen['HET'] + genotype.chimp.gen['HOM'],
direct=genotype.chimp.gen['REF'])
genotype.bonobo.gen <- table(genotype.bonobo$genoT_bonobo)
bonobo.df <- data.frame(ID='bonobo', inverted=genotype.bonobo.gen['HET'] + genotype.bonobo.gen['HOM'],
direct=genotype.bonobo.gen['REF'])
genotype.gorilla.gen <- table(genotype.gorilla$genoT_gorilla)
gorilla.df <- data.frame(ID='gorilla', inverted=genotype.gorilla.gen['HET'] + genotype.gorilla.gen['HOM'],
direct=genotype.gorilla.gen['REF'])
genotype.orangutan.gen <- table(genotype.orang$genoT_orangutan)
orangutan.df <- data.frame(ID='orangutan', inverted=genotype.orangutan.gen['HET'] + genotype.orangutan.gen['HOM'],
direct=genotype.orangutan.gen['REF'])
final.tab <- rbind(chimp.df, bonobo.df, gorilla.df, orangutan.df)
## Calculate proportion of inverted versus direct duplications
sums <- rowSums(final.tab[,c('inverted','direct')])
final.tab.long <- reshape2::melt(final.tab, id.vars = 'ID', measure.vars = c('direct', 'inverted'), variable.name = 'Dir', factorsAsStrings = TRUE)
final.tab.long$perc <- (final.tab.long$value / rep(sums, 2)) * 100
## Calculate significance of a difference between count of direct vs inverted invDups
plt.df <- final.tab.long
plt.df$Dir <- factor(plt.df$Dir, levels = c('direct', 'inverted'))
signif.results.all <- list()
for (i in unique(plt.df$ID)) {
sub.tab <- plt.df[plt.df$ID == i,]
data.matrix <- matrix(c(sub.tab$value[sub.tab$Dir == 'inverted'],
sum(sub.tab$value)/2,
sub.tab$value[sub.tab$Dir == 'direct'],
sum(sub.tab$value)/2),
nrow = 2
)
## Calculate Chi-square
chisq.pval <- chisq.test(data.matrix)$p.value
suppressWarnings( fish.oddsr <- fisher.test(data.matrix)$estimate )
signif.results <- data.frame(ID=i, chisq.pval=chisq.pval, fish.oddsr=unname(fish.oddsr))
signif.results.all[[length(signif.results.all) + 1]] <- signif.results
}
signif.results.all <- do.call(rbind, signif.results.all)
## Do multiple testing correction (Bonferroni)
signif.results.all$chisq.pval.BonfCorr <- p.adjust(p = signif.results.all$chisq.pval, method = 'bonferroni', n = length(signif.results.all$chisq.pval))
signif.results.all$pVal <- format(signif.results.all$chisq.pval.BonfCorr, scientific = TRUE, digits = 2)
plt1 <- ggplot(plt.df, aes(x=ID, y=value, group=ID)) +
geom_col(aes(fill=Dir)) +
geom_text(data=signif.results.all, aes(x=ID, y=Inf, label=pVal), inherit.aes = FALSE, vjust=1) +
geom_text(aes(group=ID, label=value), position = position_stack(vjust = 0.5)) +
xlab("") +
ylab("Counts") +
scale_fill_manual(values = c('darkslategray4', 'indianred4'), name="Direction") +
scale_x_discrete(labels = c('B', 'C', 'G', 'O'))
plt2 <- ggplot(plt.df) +
geom_col(aes(x=ID, y=perc, fill=Dir)) +
xlab("") +
ylab("Percentage (%)") +
scale_fill_manual(values = c('darkslategray4', 'indianred4')) +
scale_x_discrete(labels = c('B', 'C', 'G', 'O'))
## Save final plot
final.plt <- plot_grid(plt1, plt2, nrow = 1)
#destination <- file.path(outputdirectory, "invervedVSdirect_duplications_sudmant2013_regenotyped.pdf")
destination <- file.path(outputdirectory, "invervedVSdirect_duplications_sudmant2013_regenotyped_filtCN.pdf")
plt.df
plt.df[plt.df$Dir == 'inverted']
plt.df[plt.df$Dir == 'inverted',]
plt.df[plt.df$Dir == 'inverted',]$perc
mean(plt.df[plt.df$Dir == 'inverted',]$perc)
## Load required libraries ##
#############################
suppressPackageStartupMessages( library(primatR) )
suppressPackageStartupMessages( library(BSgenome.Hsapiens.UCSC.hg38) )
outputDirectory <- "/home/porubsky/WORK/Great_apes/Human_specific_events/"
message("Searching for human specific inversions ...")
## Load segDup Track
seg.dup <- read.table("/home/porubsky/WORK/Great_apes/Annotations/segDupTrackUCSC_hg38.bed")
seg.dup.gr <- GRanges(seqnames=seg.dup$V1, ranges=IRanges(start=seg.dup$V2, end=seg.dup$V3), fracMatch=seg.dup$V4)
## Read in all called inversions
all.inversion.calls.filt <- get(load("/home/porubsky/WORK/Great_apes/Final_INV_calls/all.inversion.calls.filt.RData"))
## Retain only simple inversions
all.SimpleInversion.calls.filt <- all.inversion.calls.filt[all.inversion.calls.filt$SVclass == 'INV']
## Get human specific inversions ##
###################################
simpleInversion.comp <- getDisjointOverlapsWeighted(gr = all.SimpleInversion.calls.filt, percTh = 50) #required 50% reciprocal overlap
simpleInversion.comp.grl <- split(simpleInversion.comp, simpleInversion.comp$sub.group)
mask <- which(lengths(simpleInversion.comp.grl) >= 4) #Select regions that appear in all 4 individuals
human.specific.grl <- simpleInversion.comp.grl[mask]
human.specific.grl
length(human.specific.grl)
unlist(human.specific.grl)
reduce(unlist(human.specific.grl))
## Filter out loci with various genotypes (Likely polymorphic)
## Keep only loci where all NHP are HOMs
mask <- sapply(human.specific.grl, function(x) all(x$gen == 'HOM'))
mask
human.specific.grl[mask]
length(human.specific.grl[mask])
reduce(human.specific.grl[mask])
reduce(unlist(human.specific.grl[mask]))
reduce(unlist(human.specific.grl[mask]))
